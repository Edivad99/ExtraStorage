import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask
import static org.apache.commons.lang3.StringUtils.repeat

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'net.neoforged.gradle.userdev' version "$neo_gradle_version"
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '2.1.0'
    id 'me.modmuss50.mod-publish-plugin' version '0.5.0'
    id 'com.diffplug.spotless' version '6.25.0'
}

def isRelease = System.getenv('CURSEFORGE_TOKEN')
if (!isRelease) {
    mod_version += '-snapshot'
}

version = "$minecraft_version-$mod_version"
group = 'edivad.extrastorage'
base.archivesName = 'ExtraStorage'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
        if (System.getProperty('idea.active')) {
            vendor = JvmVendorSpec.JETBRAINS
        }
    }
}

println(repeat('*', 60))
println("Project Version: $version")
println("Java: ${System.getProperty('java.version')}")
println("JVM: ${System.getProperty('java.vm.version')} (${System.getProperty('java.vendor')})")
println("Arch: ${System.getProperty('os.arch')}")
println(repeat('*', 60))

minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    configureEach {
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
        if (System.getProperty('idea.active')) {
            jvmArguments.add("-XX:+AllowEnhancedClassRedefinition")
        }
    }

    client {
    }

    server {
        programArgument '--nogui'
    }

    data {
        programArguments.addAll '--mod', 'extrastorage', '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    exclude '.cache'
}

repositories {
    maven {
        name 'TOP'
        url 'https://maven.k-4u.nl'
    }
    maven {
        name 'JEI/CarryOn'
        url 'https://maven.blamejared.com/'
    }
    maven {
        name 'RS maven'
        url = uri('https://maven.pkg.github.com/refinedmods/refinedstorage')
        credentials {
            username = 'anything'
            password = '\u0067hp_oGjcDFCn8jeTzIj4Ke9pLoEVtpnZMP4VQgaX'
        }
    }
    maven {
        name 'curseforge'
        url 'https://www.cursemaven.com'
    }
}

dependencies {
    implementation "net.neoforged:neoforge:$neo_version"

    implementation "curse.maven:edivadlib-638508:$edivadlib_id"
    implementation ("com.refinedmods:refinedstorage:$rs_version") {
        transitive = false
    }
    compileOnly "mcjty.theoneprobe:theoneprobe:$top_version"
    //runtimeOnly "mcjty.theoneprobe:theoneprobe:$top_version"
    compileOnly "curse.maven:jade-api-324717:$jade_id_api"
    runtimeOnly "curse.maven:jade-324717:$jade_id"

    //implementation "tschipp.carryon:carryon-forge-$minecraft_version:$co_version")
    runtimeOnly "mezz.jei:jei-$minecraft_version-neoforge:$jei_version"
    //implementation "curse.maven:mekanism-268560:4041164"
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        importOrder('\\#', 'java|javax|org|com|')

        endWithNewline()
        trimTrailingWhitespace()
        removeUnusedImports()
        indentWithSpaces(2)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll(['-Xmaxerrs', '100000'])
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
        minecraft_version               : minecraft_version,
        minecraft_version_range         : minecraft_version_range,
        neo_version                     : neo_version,
        neo_version_range               : neo_version_range,
        loader_version_range            : loader_version_range,
        mod_version                     : mod_version,
        edivadlib_version_range         : edivadlib_version_range,
        refinedstorage_version_range    : refinedstorage_version_range,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title'     : 'dimstorage',
            'Specification-Vendor'    : 'Edivad99',
            'Specification-Version'   : '1',
            'Implementation-Title'    : 'dimstorage',
            'Implementation-Version'  : project.version,
            'Implementation-Vendor'   : 'Edivad99',
            'Implementation-Commit'   : 'git rev-parse HEAD'.execute().text.trim(),
        ])
    }
}

def penultimateTag = { ->
    def stdout = new ByteArrayOutputStream()
    try {
        project.exec { ExecSpec spec ->
            spec.commandLine('git', 'describe', '--abbrev=0', '--tags', 'HEAD~').standardOutput(stdout)
        }.assertNormalExitValue().rethrowFailure()
    } catch (Exception e) {
        throw new IllegalStateException("Failed to get the tag; check if 'git' is on the PATH", e)
    }
    return stdout.toString()
}

tasks.register('makeChangelog', GitChangelogTask) {
    fromRepo = projectDir.absolutePath.toString()
    fromRevision = penultimateTag()
    toRevision = 'HEAD'
    file = file('CHANGELOG.md')
    untaggedName = 'Next release'
    templateContent = file('changelog.mustache').text
    ignoreCommitsIfMessageMatches = '^.*Merge branch.*$'
}

publishMods {
    displayName = "ExtraStorage-$minecraft_version-$mod_version"
    version = mod_version
    type = STABLE

    def changelogFile = file('CHANGELOG.md')
    changelog = changelogFile.exists() ? changelogFile.text : 'CHANGELOG.md not found'

    modLoaders.add('neoforge')
    file = jar.archiveFile

    curseforge {
        projectId = '410168'
        accessToken = providers.environmentVariable('CURSEFORGE_TOKEN')
        minecraftVersions.add(minecraft_version)
        requires('edivadlib')
        requires('refined-storage')
    }
    modrinth {
        projectId = 'T34cBZKl'
        accessToken = providers.environmentVariable('MODRINTH_TOKEN')
        minecraftVersions.add(minecraft_version)
        requires('edivadlib')
        requires('refined-storage')
    }
}
