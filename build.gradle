plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${mod_version}"
group = 'edivad.extrastorage'
base.archivesName = "ExtraStorage-${minecraft_version}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    if (mappings_channel == 'parchment_previous') {
        mappings channel: 'parchment', version: "${previous_minecraft_version}-${mappings_version}-${minecraft_version}"
    } else if (mappings_channel == 'parchment'){
        mappings channel: 'parchment', version: "${mappings_version}-${minecraft_version}"
    } else {
        mappings channel: 'official', version: "${minecraft_version}"
    }

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {

        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run/client')
        }

        server {
            workingDirectory project.file('run/server')
        }

        data {
            workingDirectory project.file('run/data')

            args '--mod', 'extrastorage', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name 'TOP'
        url 'https://maven.k-4u.nl'
    }
    maven {
        name 'JEI'
        url 'https://maven.blamejared.com/'
    }
    maven {
        name 'RS maven'
        url = uri('https://maven.pkg.github.com/refinedmods/refinedstorage')
        credentials {
            username = 'anything'
            password = '\u0067hp_oGjcDFCn8jeTzIj4Ke9pLoEVtpnZMP4VQgaX'
        }
    }
    maven {
        name 'Carry On'
        url 'https://maven.blamejared.com/'
    }
    maven {
        name 'curseforge'
        url 'https://www.cursemaven.com'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("curse.maven:edivadlib-638508:${edivadlib_id}")

    implementation fg.deobf("com.refinedmods:refinedstorage:${rs_version}") {
        transitive false
    }
    implementation fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        transitive false
    }
    /*implementation fg.deobf("tschipp.carryon:carryon-1.19.2:${co_version}") {
        transitive false
    }*/
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    //implementation fg.deobf("curse.maven:mekanism-268560:4041164")
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title'       : 'extrastorage',
            'Specification-Vendor'      : 'edivad',
            'Specification-Version'     : '1',
            'Implementation-Title'      : project.name,
            'Implementation-Version'    : project.jar.archiveVersion,
            'Implementation-Vendor'     : 'edivad',
            'Implementation-Timestamp'  : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
